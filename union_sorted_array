#include "iostream"
using namespace std;

int main() {
    int arr1[] = {1, 1,3, 4, 7,8,8,9,9};
    int arr2[] = {2,3,5,5};

    // Size of Arrays
    int n1 = sizeof(arr1) / sizeof(int);
    int n2 = sizeof(arr2) / sizeof(int);

    //
    int unionArray[(n1 + n2)];

    // location pointer variables to arr1,arr2 respectively
    int i = 0, j = 0;


    int un_id = 0; // point index to unionArray

    // until any array reached till last element
    while (i < n1 && j < n2) {
        if (arr1[i] == arr2[j]) {
            // to check whether the element is already available or not in unionArray
            if (unionArray[un_id-1] != arr1[i]) {
                // if not available already then add it to unionArray
                unionArray[un_id++] = arr1[i];
            }
            i++;
            j++;
        }

        else if (arr1[i] < arr2[j]) {
            int v = unionArray[un_id-1];
            if (unionArray[un_id-1] != arr1[i]) {
                unionArray[un_id++] = arr1[i];
            }
            i++; // only increase i (arr1 pointer) which is smaller
        }
        else if (arr1[i] > arr2[j]) {
            if (unionArray[un_id-1] != arr1[j]) {
                unionArray[un_id++] = arr2[j];
            }
            j++; // // only increase i (arr1 pointer) which is smaller
        }
    }

    // if arr1 is not fully indexed, then again add them from where they left
    while (i < n1) {

            if (unionArray[un_id-1] != arr1[i]) {
                unionArray[un_id++] = arr1[i];
            }
            i++;
        }
    // if arr2 is not fully indexed, then again add them from where they left
    while (j < n2) {
        if (unionArray[un_id-1] != arr1[j]) {
            unionArray[un_id++] = arr1[j];
        }
        j++;
    }

    // Print element till un_id (union index) position
    for(int i=0; i < un_id; i++){
        cout << unionArray[i] << " ";
    }


}
